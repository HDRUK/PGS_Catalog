# Generated by Django 4.1.10 on 2023-10-13 11:07

import django.contrib.postgres.fields.ranges
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Cohort',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_short', models.CharField(db_index=True, max_length=100, verbose_name='Cohort Short Name')),
                ('name_full', models.CharField(max_length=1000, verbose_name='Cohort Full Name')),
                ('name_others', models.TextField(null=True, verbose_name='Previous/other/additional names (e.g. sub-cohorts)')),
                ('released', models.BooleanField(default=False, verbose_name='Associated with released Score(s)')),
            ],
        ),
        migrations.CreateModel(
            name='Demographic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('estimate', models.FloatField(null=True, verbose_name='Estimate (value)')),
                ('estimate_type', models.CharField(default='mean', max_length=100, null=True, verbose_name='Estimate (type)')),
                ('unit', models.TextField(default='years', max_length=100, verbose_name='Unit')),
                ('range', django.contrib.postgres.fields.ranges.DecimalRangeField(null=True, verbose_name='Range (values)')),
                ('range_type', models.CharField(default='range', max_length=100, verbose_name='Range (type)')),
                ('variability', models.FloatField(null=True, verbose_name='Variability (value)')),
                ('variability_type', models.CharField(default='se', max_length=100, verbose_name='Variablility (type)')),
            ],
        ),
        migrations.CreateModel(
            name='EFOTrait',
            fields=[
                ('id', models.CharField(max_length=30, primary_key=True, serialize=False, verbose_name='Ontology Trait ID')),
                ('label', models.CharField(db_index=True, max_length=500, verbose_name='Ontology Trait Label')),
                ('description', models.TextField(null=True, verbose_name='Ontology Trait Description')),
                ('url', models.CharField(max_length=500, verbose_name='Ontology URL')),
                ('synonyms', models.TextField(null=True, verbose_name='Synonyms')),
                ('mapped_terms', models.TextField(null=True, verbose_name='Mapped terms')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EFOTrait_Ontology',
            fields=[
                ('id', models.CharField(max_length=30, primary_key=True, serialize=False, verbose_name='Ontology Trait ID')),
                ('label', models.CharField(db_index=True, max_length=500, verbose_name='Ontology Trait Label')),
                ('description', models.TextField(null=True, verbose_name='Ontology Trait Description')),
                ('url', models.CharField(max_length=500, verbose_name='Ontology URL')),
                ('synonyms', models.TextField(null=True, verbose_name='Synonyms')),
                ('mapped_terms', models.TextField(null=True, verbose_name='Mapped terms')),
                ('child_traits', models.ManyToManyField(related_name='parent_traits', to='catalog.efotrait_ontology', verbose_name='Child traits')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EmbargoedPublication',
            fields=[
                ('id', models.CharField(max_length=30, primary_key=True, serialize=False, verbose_name='PGS Publication/Study ID (PGP)')),
                ('title', models.TextField(null=True, verbose_name='Title')),
                ('firstauthor', models.CharField(max_length=50, verbose_name='First Author')),
            ],
        ),
        migrations.CreateModel(
            name='EmbargoedScore',
            fields=[
                ('id', models.CharField(max_length=30, primary_key=True, serialize=False, verbose_name='Polygenic Score ID')),
                ('name', models.CharField(max_length=100, verbose_name='PGS Name')),
                ('trait_reported', models.TextField(verbose_name='Reported Trait')),
                ('firstauthor', models.CharField(max_length=50, verbose_name='First Author')),
            ],
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('num', models.IntegerField(primary_key=True, serialize=False, verbose_name='PGS Publication/Study Number (PGP)')),
                ('id', models.CharField(db_index=True, max_length=30, verbose_name='PGS Publication/Study ID (PGP)')),
                ('date_released', models.DateField(db_index=True, null=True, verbose_name='PGS Release Date')),
                ('doi', models.CharField(max_length=100, verbose_name='digital object identifier (doi)')),
                ('PMID', models.IntegerField(null=True, verbose_name='PubMed ID (PMID)')),
                ('journal', models.CharField(max_length=100, verbose_name='Journal Name')),
                ('firstauthor', models.CharField(max_length=50, verbose_name='First Author')),
                ('authors', models.TextField(verbose_name='Authors')),
                ('title', models.TextField(verbose_name='Title')),
                ('date_publication', models.DateField(verbose_name='Publication Date')),
                ('curation_status', models.CharField(choices=[('C', 'Curated'), ('ID', 'Curated - insufficient data'), ('IP', 'Curation in Progress'), ('AW', 'Awaiting Curation'), ('E', 'Embargoed')], default='AW', max_length=2, verbose_name='Curation Status')),
                ('curation_notes', models.TextField(default='', verbose_name='Curation Notes')),
            ],
            options={
                'get_latest_by': 'num',
            },
        ),
        migrations.CreateModel(
            name='Release',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(db_index=True, verbose_name='Release date')),
                ('score_count', models.IntegerField(default=0, verbose_name='Number of new PGS scores released')),
                ('performance_count', models.IntegerField(default=0, verbose_name='Number of new PGS Performance metrics released')),
                ('publication_count', models.IntegerField(default=0, verbose_name='Number of new PGS Publication released')),
                ('notes', models.TextField(blank=True, max_length=600, verbose_name='Release notes')),
                ('updated_score_count', models.IntegerField(default=0, verbose_name='Number of PGS scores updated')),
                ('updated_performance_count', models.IntegerField(default=0, verbose_name='Number of PGS Performance metrics updated')),
                ('updated_publication_count', models.IntegerField(default=0, verbose_name='Number of PGS Publication updated')),
            ],
        ),
        migrations.CreateModel(
            name='Retired',
            fields=[
                ('id', models.CharField(max_length=30, primary_key=True, serialize=False, verbose_name='Score or Publication ID')),
                ('doi', models.CharField(max_length=100, verbose_name='digital object identifier (doi)')),
                ('notes', models.TextField(blank=True, max_length=600, verbose_name='Retirement notes')),
            ],
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_number', models.IntegerField(null=True, verbose_name='Number of Individuals')),
                ('sample_cases', models.IntegerField(null=True, verbose_name='Number of Cases')),
                ('sample_controls', models.IntegerField(null=True, verbose_name='Number of Controls')),
                ('sample_percent_male', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Percent of Participants Who are Male')),
                ('phenotyping_free', models.TextField(null=True, verbose_name='Phenotype Definitions and Methods')),
                ('ancestry_broad', models.CharField(max_length=250, verbose_name='Broad Ancestry Category')),
                ('ancestry_free', models.TextField(null=True, verbose_name='Ancestry (e.g. French, Chinese)')),
                ('ancestry_country', models.TextField(null=True, verbose_name='Country of Recruitment')),
                ('ancestry_additional', models.TextField(null=True, verbose_name='Additional Ancestry Description')),
                ('source_GWAS_catalog', models.CharField(max_length=20, null=True, verbose_name='GWAS Catalog Study ID (GCST...)')),
                ('source_PMID', models.IntegerField(null=True, verbose_name='Source PubMed ID (PMID)')),
                ('source_DOI', models.CharField(max_length=100, null=True, verbose_name='Source DOI')),
                ('cohorts_additional', models.TextField(null=True, verbose_name='Additional Sample/Cohort Information')),
                ('cohorts', models.ManyToManyField(to='catalog.cohort', verbose_name='Cohort(s)')),
                ('followup_time', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='followuptime_of', to='catalog.demographic')),
                ('sample_age', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ages_of', to='catalog.demographic')),
            ],
        ),
        migrations.CreateModel(
            name='TraitCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(db_index=True, max_length=50, verbose_name='Trait category')),
                ('colour', models.CharField(max_length=30, verbose_name='Trait category colour')),
                ('parent', models.CharField(max_length=50, verbose_name='Trait category (parent term)')),
                ('efotraits', models.ManyToManyField(related_name='traitcategory', to='catalog.efotrait', verbose_name='Traits')),
                ('efotraits_ontology', models.ManyToManyField(related_name='traitcategory', to='catalog.efotrait_ontology', verbose_name='Parent Traits')),
            ],
            options={
                'verbose_name_plural': 'Trait categories',
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('num', models.IntegerField(primary_key=True, serialize=False, verbose_name='Polygenic Score (PGS) Number')),
                ('id', models.CharField(db_index=True, max_length=30, verbose_name='Polygenic Score (PGS) ID')),
                ('name', models.CharField(max_length=100, verbose_name='PGS Name')),
                ('date_released', models.DateField(db_index=True, null=True, verbose_name='PGS Catalog Release Date')),
                ('curation_notes', models.TextField(default='', verbose_name='Curation Notes')),
                ('flag_asis', models.BooleanField(default=True, verbose_name='Score and results match the original publication')),
                ('trait_reported', models.TextField(verbose_name='Reported Trait')),
                ('trait_additional', models.TextField(null=True, verbose_name='Additional Trait Information')),
                ('method_name', models.TextField(verbose_name='PGS Development Method')),
                ('method_params', models.TextField(null=True, verbose_name='PGS Development Details/Relevant Parameters')),
                ('variants_number', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Number of Variants')),
                ('variants_interactions', models.IntegerField(default=0, verbose_name='Number of Interaction Terms')),
                ('variants_genomebuild', models.CharField(default='NR', max_length=10, verbose_name='Original Genome Build')),
                ('license', models.TextField(default='PGS obtained from the Catalog should be cited appropriately, and used in accordance with any licensing restrictions set by the authors. See EBI Terms of Use (https://www.ebi.ac.uk/about/terms-of-use/) for additional details.', verbose_name='License/Terms of Use')),
                ('ancestries', models.JSONField(null=True, verbose_name='Ancestry distributions')),
                ('weight_type', models.TextField(default='NR', verbose_name='PGS Weight Type')),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='publication_score', to='catalog.publication', verbose_name='PGS Publication ID (PGP)')),
                ('samples_training', models.ManyToManyField(related_name='score_training', to='catalog.sample', verbose_name='Score Development/Training')),
                ('samples_variants', models.ManyToManyField(related_name='score_variants', to='catalog.sample', verbose_name='Source of Variant Associations (GWAS)')),
                ('trait_efo', models.ManyToManyField(related_name='associated_scores', to='catalog.efotrait', verbose_name='Mapped Trait(s) (EFO terms)')),
            ],
            options={
                'get_latest_by': 'num',
            },
        ),
        migrations.CreateModel(
            name='SampleSet',
            fields=[
                ('num', models.IntegerField(primary_key=True, serialize=False, verbose_name='PGS Sample Set (PSS) Number')),
                ('id', models.CharField(db_index=True, max_length=30, verbose_name='PGS Sample Set (PSS) ID')),
                ('name', models.CharField(max_length=100, null=True, verbose_name='Sample Set ID (curation template)')),
                ('samples', models.ManyToManyField(related_name='sampleset', to='catalog.sample', verbose_name='Sample Set Descriptions')),
            ],
        ),
        migrations.CreateModel(
            name='Performance',
            fields=[
                ('num', models.IntegerField(primary_key=True, serialize=False, verbose_name='PGS Performance Metric (PPM) Number')),
                ('id', models.CharField(db_index=True, max_length=30, verbose_name='PGS Performance Metric (PPM) ID')),
                ('date_released', models.DateField(db_index=True, null=True, verbose_name='PGS Catalog Release Date')),
                ('curation_notes', models.TextField(default='', verbose_name='Curation Notes')),
                ('phenotyping_reported', models.CharField(max_length=200, verbose_name='Reported Trait')),
                ('covariates', models.TextField(null=True, verbose_name='Covariates Included in the Model')),
                ('performance_comments', models.TextField(null=True, verbose_name='PGS Performance: Other Relevant Information')),
                ('phenotyping_efo', models.ManyToManyField(to='catalog.efotrait', verbose_name='Mapped Trait(s) (EFO)')),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='publication_performance', to='catalog.publication', verbose_name='Peformance Source')),
                ('sampleset', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sampleset_performance', to='catalog.sampleset', verbose_name='PGS Sample Set (PSS)')),
                ('score', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.score', verbose_name='Evaluated Score')),
            ],
            options={
                'get_latest_by': 'num',
            },
        ),
        migrations.CreateModel(
            name='Metric',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('ES', 'Effect Size'), ('CM', 'Classification Metric'), ('OM', 'Other Metric')], db_index=True, default='Other Metric', max_length=40)),
                ('name', models.CharField(max_length=100, verbose_name='Performance Metric Name')),
                ('name_short', models.CharField(max_length=10, null=True, verbose_name='Performance Metric Name (Short)')),
                ('estimate', models.FloatField(verbose_name='Estimate')),
                ('unit', models.TextField(max_length=100, verbose_name='Units of the effect size')),
                ('ci', django.contrib.postgres.fields.ranges.DecimalRangeField(null=True, verbose_name='95% Confidence Interval')),
                ('se', models.FloatField(null=True, verbose_name='Standard error of the effect')),
                ('performance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_metric', to='catalog.performance', verbose_name='PGS Performance Metric (PPM)')),
            ],
        ),
        migrations.CreateModel(
            name='EvaluatedScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='publication_evaluatedscore', to='catalog.publication', verbose_name='PGS Publication ID (PGP)')),
                ('scores_evaluated', models.ManyToManyField(related_name='score_evaluatedscore', to='catalog.score', verbose_name='Evaluated Scores')),
            ],
        ),
        migrations.AddField(
            model_name='efotrait_ontology',
            name='scores_child_associations',
            field=models.ManyToManyField(related_name='scores_trait_child_associations', to='catalog.score', verbose_name='PGS Score IDs - child associations'),
        ),
        migrations.AddField(
            model_name='efotrait_ontology',
            name='scores_direct_associations',
            field=models.ManyToManyField(related_name='scores_trait_direct_associations', to='catalog.score', verbose_name='PGS Score IDs - direct associations'),
        ),
    ]
